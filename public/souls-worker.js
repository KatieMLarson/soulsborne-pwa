let doCache = true;
let randomBoss;
const CACHE_NAME = 'bosses';

const urlsToCache = [
    '/images/Maria.png',
    '/images/soulsborne-pwa-icon.jpg',
    '/images/Eileen_animation.gif',
    '/images/Father_Gascoigne.gif',
    '/images/Gaping_dragon.gif',
    '/images/Gywndolin.jpg',
    '/images/moon_presence.gif',
    '/images/Nameless_King.jpg',
    '/images/Queelag.jpg',
    '/images/Rakuyo.gif',
    '/images/Sanctuary_guardian.jpg',
    '/images/Sif.jpg',
    '/images/Paarl.jpg'
];

self.addEventListener('activate', event => {
    console.log("I'm activated!")
    const cacheWhitelist = [CACHE_NAME];
    event.waitUntil(
        caches.keys()
            .then(keyList =>
                Promise.all(keyList.map(key => {
                    if (!cacheWhitelist.includes(key)) {
                        console.log('Deleting cache: ' + key)
                        return caches.delete(key);
                    }
                }))
            )
    );
});

self.addEventListener('activate', event => {
    console.log("claiming my clients!")
    event.waitUntil(clients.claim());
});

// The first time the user starts up the PWA, 'install' is triggered.
self.addEventListener('install', function(event) {
    if (doCache) {
        event.waitUntil(
            caches.open(CACHE_NAME)
                .then(cache => {
                    // Get the assets manifest so we can see what our js file is named
                    // This is because webpack hashes it
                    fetch("asset-manifest.json")
                        .then(response => {
                            return response.json()
                        }).then(response => {
                            // Open a cache and cache our files
                            // We want to cache the page and the main.js generated by webpack
                            // We could also cache any static assets like CSS or images
                            const initialUrlsToCache = [...urlsToCache,
                                "/",
                                response.files["main.js"]
                            ]
                            cache.addAll(initialUrlsToCache)
                            console.log('cached');
                        })
                })
        );
    }
});

self.addEventListener('fetch', async event => {
    const url = new URL(event.request.url);
    randomBoss = urlsToCache[Math.floor(Math.random() * Math.floor(urlsToCache.length))]
    console.log(randomBoss)
    if (url.origin == location.origin && url.pathname == '/static/media/soulsborne-pwa-icon.d2b0bad7.jpg') {
       event.respondWith(caches.match(randomBoss))
    }
    }
);
//
// const getCachedFile = (event) => {
//     event.waitUntil(
//         caches.open("bosses")
//             .then(cache => {
//                 return cache.keys()}).then(keys => {
//             keys.splice(0, 2)
//             return keys[Math.floor(Math.random() * Math.floor(keys.length))].url
//         })
//     )
// }

// const getCachedFile = async () => {
//
//      bossCache = await caches.open("bosses")
//         .then(cache => {return cache.keys()})
//         .then(cacheList => {
//             return cacheList
//         })
//     bossCache.splice(0,2)
//     return bossCache[Math.floor(Math.random() * Math.floor(bossCache.length))]
// }

